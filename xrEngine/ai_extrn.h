// 
// 	 Enemy Engaged RAH-66 Comanche Versus KA-52 Hokum
// 	 Copyright (C) 2000 Empire Interactive (Europe) Ltd,
// 	 677 High Road, North Finchley, London N12 0DA
// 
// 	 Please see the document LICENSE.TXT for the full licence agreement
// 
// 2. LICENCE
//  2.1 	
//  	Subject to the provisions of this Agreement we now grant to you the 
//  	following rights in respect of the Source Code:
//   2.1.1 
//   	the non-exclusive right to Exploit  the Source Code and Executable 
//   	Code on any medium; and 
//   2.1.2 
//   	the non-exclusive right to create and distribute Derivative Works.
//  2.2 	
//  	Subject to the provisions of this Agreement we now grant you the
// 	following rights in respect of the Object Code:
//   2.2.1 
// 	the non-exclusive right to Exploit the Object Code on the same
// 	terms and conditions set out in clause 3, provided that any
// 	distribution is done so on the terms of this Agreement and is
// 	accompanied by the Source Code and Executable Code (as
// 	applicable).
// 
// 3. GENERAL OBLIGATIONS
//  3.1 
//  	In consideration of the licence granted in clause 2.1 you now agree:
//   3.1.1 
// 	that when you distribute the Source Code or Executable Code or
// 	any Derivative Works to Recipients you will also include the
// 	terms of this Agreement;
//   3.1.2 
// 	that when you make the Source Code, Executable Code or any
// 	Derivative Works ("Materials") available to download, you will
// 	ensure that Recipients must accept the terms of this Agreement
// 	before being allowed to download such Materials;
//   3.1.3 
// 	that by Exploiting the Source Code or Executable Code you may
// 	not impose any further restrictions on a Recipient's subsequent
// 	Exploitation of the Source Code or Executable Code other than
// 	those contained in the terms and conditions of this Agreement;
//   3.1.4 
// 	not (and not to allow any third party) to profit or make any
// 	charge for the Source Code, or Executable Code, any
// 	Exploitation of the Source Code or Executable Code, or for any
// 	Derivative Works;
//   3.1.5 
// 	not to place any restrictions on the operability of the Source 
// 	Code;
//   3.1.6 
// 	to attach prominent notices to any Derivative Works stating
// 	that you have changed the Source Code or Executable Code and to
// 	include the details anddate of such change; and
//   3.1.7 
//   	not to Exploit the Source Code or Executable Code otherwise than
// 	as expressly permitted by  this Agreement.
// 



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define AI_ESCORT_TASK_GENERATION_POWER_THRESH_HOLD 2

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

enum STRATEGY_TYPES
{

   STRATEGY_TYPE_INVALID,
   STRATEGY_TYPE_RETREAT,
   STRATEGY_TYPE_DEFEND,
   STRATEGY_TYPE_ADVANCE,
   NUM_STRATEGY_TYPES
};

typedef enum STRATEGY_TYPES strategy_types;

extern const char *strategy_names [];

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

enum GROUP_MODE_TYPES
{
   GROUP_MODE_IDLE,
   GROUP_MODE_BUSY,
   NUM_GROUP_MODE_TYPES
};

typedef enum GROUP_MODE_TYPES group_mode_types;

extern const char *group_mode_names [];

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

enum MOVEMENT_TYPES
{
   MOVEMENT_TYPE_NONE,
   MOVEMENT_TYPE_AIR,
   MOVEMENT_TYPE_GROUND,
   MOVEMENT_TYPE_SEA,
   MOVEMENT_TYPE_ALL,
   NUM_MOVEMENT_TYPES
};

typedef enum MOVEMENT_TYPES movement_types;

extern const char *movement_names [];

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

enum AI_SUITABILITY_TYPES
{
   AI_SUITABILITY_AIR_ATTACK_STRENGTH,
   AI_SUITABILITY_GROUND_ATTACK_STRENGTH,
   AI_SUITABILITY_MOVEMENT_SPEED,
   AI_SUITABILITY_MOVEMENT_STEALTH,
   AI_SUITABILITY_CARGO_SPACE,
   AI_SUITABILITY_TROOP_SPACE,
   NUM_AI_SUITABILITY_TYPES
};

typedef enum AI_SUITABILITY_TYPES ai_suitability_types;

extern const char *ai_suitability_type_names [];

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

enum TASK_URGENCY_TYPES
{

	TASK_URGENCY_0,
	TASK_URGENCY_1,
	TASK_URGENCY_2,
	TASK_URGENCY_3,
	TASK_URGENCY_4,
	TASK_URGENCY_5,
	TASK_URGENCY_6,
	TASK_URGENCY_7,
	TASK_URGENCY_8,
	TASK_URGENCY_9,
	TASK_URGENCY_10,
};

typedef enum TASK_URGENCY_TYPES task_urgency_types;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct AI_STATISTICS
{

   union
	{
	
  		struct
		{

			int
				air_attack_strength,
				ground_attack_strength,
				movement_speed,
				movement_stealth,
				cargo_space,
				troop_space;
		};

		int
			stats [NUM_AI_SUITABILITY_TYPES];
   };
};

typedef struct AI_STATISTICS ai_statistics;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

enum FRONTLINE_SECTOR_TYPES
{

	FRONTLINE_SECTOR_NONE,
	FRONTLINE_SECTOR_PRIMARY,
	NUM_FRONTLINE_SECTOR_TYPES
};

typedef enum FRONTLINE_SECTOR_TYPES frontline_sector_types;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
